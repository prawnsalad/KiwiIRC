<%
  require 'uv'
  def code_for(file, executable=false)
    return '' unless File.exists?("documentation/js/#{file}.js")
    cs = File.read("documentation/coffee/#{file}.coffee")
    js = File.read("documentation/js/#{file}.js")
    cshtml = Uv.parse(cs, 'xhtml', 'coffeescript', false, 'idle', false)
    jshtml = Uv.parse(js, 'xhtml', 'javascript', false, 'idle', false)
    append = executable == true ? '' : "alert(#{executable});"
    run    = executable == true ? 'run' : "run: #{executable}"
    button = executable ? "<button onclick='javascript: #{js};#{append}'>#{run}</button>" : ''
    "<div class='code'>#{cshtml}#{jshtml}#{button}<br class='clear' /></div>"
  end
%>


<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <title>CoffeeScript</title>
  <link rel="stylesheet" type="text/css" href="documentation/css/docs.css" />
  <link rel="stylesheet" type="text/css" href="documentation/css/idle.css" />
  <link rel="shortcut icon" href="documentation/images/favicon.ico" />
</head>
<body class="minimized">

  <div id="fadeout"></div>

  <div id="flybar">
    <a id="logo" href="#top"> </a>
    <div class="navigation toc">
      <div class="button">
        Table of Contents
      </div>
      <div class="contents">
        <a href="#overview">Mini Overview</a>
        <a href="#installation">Installation and Usage</a>
        <a href="#language">Language Reference</a>
        <a href="#whitespace">Significant Whitespace</a>
        <a href="#functions">Functions and Invocation</a>
        <a href="#objects_and_arrays">Objects and Arrays</a>
        <a href="#lexical_scope">Lexical Scoping and Variable Safety</a>
        <a href="#conditionals">If, Else, Unless, and Conditional Assignment</a>
        <a href="#aliases">Aliases</a>
        <a href="#splats">Splats...</a>
        <a href="#while">While, Until, and Loop</a>
        <a href="#comprehensions">Comprehensions (Arrays, Objects, and Ranges)</a>
        <a href="#slice_splice">Array Slicing and Splicing with Ranges</a>
        <a href="#expressions">Everything is an Expression</a>
        <a href="#existence">The Existential Operator</a>
        <a href="#classes">Classes, Inheritance, and Super</a>
        <a href="#pattern_matching">Pattern Matching</a>
        <a href="#fat_arrow">Function Binding</a>
        <a href="#embedded">Embedded JavaScript</a>
        <a href="#switch">The Switch Statement</a>
        <a href="#try">Try/Catch/Finally</a>
        <a href="#comparisons">Chained Comparisons</a>
        <a href="#interpolation">String and RegExp Interpolation</a>
        <a href="#heredocs">Multiline Strings, Heredocs, and Block Comments</a>
        <a href="#cake">Cake, and Cakefiles</a>
        <a href="#scripts">"text/coffeescript" Script Tags</a>
        <a href="#resources">Resources</a>
        <a href="#webchat">Web Chat (IRC)</a>
        <a href="#change_log">Change Log</a>
      </div>
    </div>
    <div class="navigation try">
      <div class="button">
        Try CoffeeScript
      </div>
      <div class="contents repl_wrapper">
        <div class="code">
          <div id="repl_source_wrap"><textarea id="repl_source" rows="100">alert "Hello CoffeeScript!"</textarea></div>
          <pre id="repl_results"></pre>
          <button class="full_screen">go full screen</button>
          <button class="minimize">minimize</button>
          <button class="run">run</button>
          <br class="clear" />
        </div>
      </div>
    </div>
    <div class="navigation annotated">
      <div class="button">
        Annotated Source
      </div>
      <div class="contents">
        <a href="documentation/docs/grammar.html">Grammar Rules &mdash; src/grammar</a>
        <a href="documentation/docs/lexer.html">Lexing Tokens &mdash; src/lexer</a>
        <a href="documentation/docs/rewriter.html">The Rewriter &mdash; src/rewriter</a>
        <a href="documentation/docs/nodes.html">The Syntax Tree &mdash; src/nodes</a>
        <a href="documentation/docs/scope.html">Lexical Scope &mdash; src/scope</a>
        <a href="documentation/docs/helpers.html">Helpers &amp; Utility Functions &mdash; src/helpers</a>
        <a href="documentation/docs/coffee-script.html">The CoffeeScript Module &mdash; src/coffee-script</a>
        <a href="documentation/docs/cake.html">Cake &amp; Cakefiles &mdash; src/cake</a>
        <a href="documentation/docs/command.html">"coffee" Command-Line Utility &mdash; src/command</a>
        <a href="documentation/docs/optparse.html">Option Parsing &mdash; src/optparse</a>
        <a href="documentation/docs/repl.html">Interactive REPL &mdash; src/repl</a>
      </div>
    </div>
    <div id="error" style="display:none;"></div>
  </div>

  <div class="container">
    <span class="bookmark" id="top"></span>

    <p>
      CoffeeScript is a little language that compiles into JavaScript. Think
      of it as JavaScript's less ostentatious kid brother &mdash; the same genes,
      roughly the same height, but a different sense of style. Apart from a handful of
      bonus goodies, statements in CoffeeScript correspond one-to-one with their
      equivalent in JavaScript, it's just another way of saying it.
    </p>

    <p>
      <b>Disclaimer:</b>
      CoffeeScript is just for fun. Until it reaches 1.0, <i>there are no guarantees
      that the syntax won't change between versions.</i> That said,
      it compiles into clean JavaScript (the good parts) that can use existing
      JavaScript libraries seamlessly, and passes through
      <a href="http://www.jslint.com/">JSLint</a> without warnings. The compiled
      output is pretty-printed and quite readable.
    </p>

    <p>
      <b>Latest Version:</b>
      <a href="http://github.com/jashkenas/coffee-script/tarball/0.9.4">0.9.4</a>
    </p>

    <h2>
      <span id="overview" class="bookmark"></span>
      Mini Overview
    </h2>

    <p><i>CoffeeScript on the left, compiled JavaScript output on the right.</i></p>

    <%= code_for('overview', 'cubes') %>

    <p>
      For a longer CoffeeScript example, check out
      <a href="documentation/docs/underscore.html">Underscore.coffee</a>, a port
      of the <a href="http://documentcloud.github.com/underscore/">Underscore.js</a>
      library of helper functions. Underscore.coffee can pass the entire Underscore.js
      test suite. The CoffeeScript version is faster than the original for a number
      of methods (in general, due to the speed of CoffeeScript's array comprehensions), and
      after being minified and gzipped, is only 241 bytes larger than the original
      JavaScript version.
      Additional examples are included in the source repository, inside the
      <a href="http://github.com/jashkenas/coffee-script/tree/master/examples/">examples</a> folder.
    </p>

    <h2>
      <span id="installation" class="bookmark"></span>
      Installation and Usage
    </h2>

    <p>
      The CoffeeScript compiler is written in pure CoffeeScript, using a
      <a href="documentation/docs/grammar.html">small DSL</a>
      on top of the <a href="http://github.com/zaach/jison">Jison parser generator</a>, and is available
      as a <a href="http://nodejs.org/">Node.js</a> utility. The core compiler however,
      does not depend on Node, and can be run in other server-side-JavaScript environments,
      or in the browser (see "Try CoffeeScript", above).
    </p>

    <p>
      To install, first make sure you have a working copy of the latest tagged version of
      <a href="http://nodejs.org/">Node.js</a>, currently <b>0.1.102</b> or higher.
      Then clone the CoffeeScript
      <a href="http://github.com/jashkenas/coffee-script">source repository</a>
      from GitHub, or download the latest
      release: <a href="http://github.com/jashkenas/coffee-script/tarball/0.9.4">0.9.4</a>.
      To install the CoffeeScript compiler system-wide
      under <tt>/usr/local</tt>, open the directory and run:
    </p>

    <pre>
sudo bin/cake install</pre>

    <p>
      Alternatively, if you already have the
      <a href="http://npmjs.org/">Node Package Manager</a> installed,
      you can use that to grab the latest CoffeeScript:
    </p>

    <pre>
sudo npm install coffee-script</pre>

    <p>
      Both of these provide the <tt>coffee</tt> command, which will execute CoffeeScripts
      under Node.js by default, but is also used to compile CoffeeScript
      <tt>.coffee</tt> files into JavaScript, or to run an an interactive REPL.
      When compiling to JavaScript, <tt>coffee</tt> writes the output
      as <tt>.js</tt> files in the same directory by default, but output
      can be customized with the following options:
    </p>

    <table>
      <tr>
        <td><code>-c, --compile</code></td>
        <td>
          Compile a <tt>.coffee</tt> script into a <tt>.js</tt> JavaScript file
          of the same name.
        </td>
      </tr>
      <tr>
        <td width="25%"><code>-i, --interactive</code></td>
        <td>
          Launch an interactive CoffeeScript session to try short snippets.
          More pleasant if wrapped with
          <a href="http://utopia.knoware.nl/~hlub/uck/rlwrap/rlwrap.html">rlwrap</a>.
        </td>
      </tr>
      <tr>
        <td><code>-o, --output [DIR]</code></td>
        <td>
          Write out all compiled JavaScript files into the specified directory.
          Use in conjunction with <tt>--compile</tt> or <tt>--watch</tt>.
        </td>
      </tr>
      <tr>
        <td><code>-w, --watch</code></td>
        <td>
          Watch the modification times of the coffee-scripts, recompiling as
          soon as a change occurs.
        </td>
      </tr>
      <tr>
        <td><code>-p, --print</code></td>
        <td>
          Instead of writing out the JavaScript as a file, print it
          directly to <b>stdout</b>.
        </td>
      </tr>
      <tr>
        <td><code>-l, --lint</code></td>
        <td>
          If the <tt>jsl</tt>
          (<a href="http://www.javascriptlint.com/">JavaScript Lint</a>)
          command is installed, use it
          to check the compilation of a CoffeeScript file. (Handy in
          conjunction with <br /> <tt>--watch</tt>)
        </td>
      </tr>
      <tr>
        <td><code>-s, --stdio</code></td>
        <td>
          Pipe in CoffeeScript to STDIN and get back JavaScript over STDOUT.
          Good for use with processes written in other languages. An example:<br />
          <tt>cat src/cake.coffee | coffee -sc</tt>
        </td>
      </tr>
      <tr>
        <td><code>-e, --eval</code></td>
        <td>
          Compile and print a little snippet of CoffeeScript directly from the
          command line. For example:<br /><tt>coffee -e "puts num for num in [10..1]"</tt>
        </td>
      </tr>
      <tr>
        <td><code>-r, --require</code></td>
        <td>
          Load a library before compiling or executing your script. Can be used
          to hook in to the compiler (to add Growl notifications, for example).
        </td>
      </tr>
      <tr>
        <td><code>-b, --bare</code></td>
        <td>
          Compile the JavaScript without the top-level function safety wrapper.
          (Used for CoffeeScript as a Node.js module.)
        </td>
      </tr>
      <tr>
        <td><code>-t, --tokens</code></td>
        <td>
          Instead of parsing the CoffeeScript, just lex it, and print out the
          token stream: <tt>[IDENTIFIER square] [ASSIGN =] [PARAM_START (]</tt> ...
        </td>
      </tr>
      <tr>
        <td><code>-n, --nodes</code></td>
        <td>
          Instead of compiling the CoffeeScript, just lex and parse it, and print
          out the parse tree:
<pre class="no_bar">
Expressions
  Assign
    Value "square"
    Code "x"
      Op *
        Value "x"
        Value "x"</pre>
        </td>
      </tr>
    </table>

    <p>
      <b>Examples:</b>
    </p>

    <pre>
coffee -c path/to/script.coffee
coffee --interactive
coffee --watch --lint experimental.coffee
coffee --print app/scripts/*.coffee > concatenation.js</pre>

    <h2>
      <span id="language" class="bookmark"></span>
      Language Reference
    </h2>

    <p>
      <i>
        This reference is structured so that it can be read from top to bottom,
        if you like. Later sections use ideas and syntax previously introduced.
        Familiarity with JavaScript is assumed.
        In all of the following examples, the source CoffeeScript is provided on
        the left, and the direct compilation into JavaScript is on the right.
      </i>
    </p>

    <p>
      <i>
        Many of the examples can be run (where it makes sense) by pressing the "run"
        button towards the bottom right. You can also paste examples into
        "Try CoffeeScript" in the toolbar, and play with them from there.
      </i>
    <p>
      <span id="whitespace" class="bookmark"></span>
      <b class="header">Significant Whitespace</b>
      CoffeeScript uses Python-style significant whitespace: You don't need to
      use semicolons <tt>;</tt> to terminate expressions, ending
      the line will do just as well. Semicolons can still be used to fit
      multiple expressions onto a single line. Instead of using curly braces
      <tt>{ }</tt> to delimit blocks of code (like <a href="#functions">functions</a>,
      <a href="#conditionals">if-statements</a>,
      <a href="#switch">switch</a>, and <a href="#try">try/catch</a>),
      use indentation.
    </p>

    <p>
      You don't need to use parentheses to invoke a function if you're passing
      arguments:<br /><tt>print "coffee"</tt>. Implicit parentheses wrap forwards
      to the end of the line, or block expression.
    </p>

    <p>
      You can use newlines to break up your expression into smaller pieces,
      as long as CoffeeScript can determine that the line hasn't finished yet,
      because it ends with an operator or a dot ... seen most commonly
      in jQuery-chaining style JavaScript.
    </p>

    <p>
      <span id="functions" class="bookmark"></span>
      <b class="header">Functions and Invocation</b>
      Functions are defined by a list of parameters, an arrow, and the
      function body. The empty function looks like this: <tt>-></tt>
    </p>
    <%= code_for('functions', 'cube(5)') %>

    <p>
      <span id="objects_and_arrays" class="bookmark"></span>
      <b class="header">Objects and Arrays</b>
      Object and Array literals look very similar to their JavaScript cousins.
      When you spread out each property on a separate line, the commas are
      optional. Implicit objects may be created with indentation instead of
      brackets, winding up looking quite similar to YAML.
    </p>
    <%= code_for('objects_and_arrays', 'song.join(",")') %>
    <p>
      In JavaScript, you can't use reserved words, like <tt>class</tt>, as properties
      of an object, without quoting them as strings. CoffeeScript notices and quotes
      them for you, so you don't have to worry about it (say, when using jQuery).
    </p>
    <%= code_for('objects_reserved') %>

    <p>
      <span id="lexical_scope" class="bookmark"></span>
      <b class="header">Lexical Scoping and Variable Safety</b>
      The CoffeeScript compiler takes care to make sure that all of your variables
      are properly declared within lexical scope &mdash; you never need to write
      <tt>var</tt> yourself.
    </p>
    <%= code_for('scope', 'inner') %>
    <p>
      Notice how all of the variable declarations have been pushed up to
      the top of the closest scope, the first time they appear.
      <b>outer</b> is not redeclared within the inner function, because it's
      already in scope; <b>inner</b> within the function, on the other hand,
      should not be able to change the value of the external variable of the same name, and
      therefore has a declaration of its own.
    </p>
    <p>
      This behavior is effectively identical to Ruby's scope for local variables.
      Because you don't have direct access to the <tt>var</tt> keyword,
      it's impossible to shadow an outer variable on purpose, you may only refer
      to it. So be careful that you're not reusing the name of an external
      variable accidentally, if you're writing a deeply nested function.
    </p>
    <p>
      Although suppressed within this documentation for clarity, all
      CoffeeScript output is wrapped in an anonymous function:
      <tt>(function(){ ... })();</tt> This safety wrapper, combined with the
      automatic generation of the <tt>var</tt> keyword, make it exceedingly difficult
      to pollute the global namespace by accident.
    </p>
    <p>
      If you'd like to create top-level variables for other scripts to use,
      attach them as properties on <b>window</b>, or on the <b>exports</b>
      object in CommonJS. The <b>existential operator</b> (covered below), gives you a
      reliable way to figure out where to add them, if you're targeting both
      CommonJS and the browser: <tt>root = exports ? this</tt>
    </p>

    <p>
      <span id="conditionals" class="bookmark"></span>
      <b class="header">If, Else, Unless, and Conditional Assignment</b>
      <b>If/else</b> statements can be written without the use of parentheses and
      curly brackets. As with functions and other block expressions,
      multi-line conditionals are delimited by indentation. There's also a handy
      postfix form, with the <tt>if</tt> or <tt>unless</tt> at the end.
    </p>
    <p>
      CoffeeScript can compile <b>if</b> statements into JavaScript expressions,
      using the ternary operator when possible, and closure wrapping otherwise. There
      is no explicit ternary statement in CoffeeScript &mdash; you simply use
      a regular <b>if</b> statement inline.
    </p>
    <%= code_for('conditionals') %>

    <p>
      <span id="aliases" class="bookmark"></span>
      <b class="header">Aliases</b>
      Because the <tt>==</tt> operator frequently causes undesirable coercion,
      is intransitive, and has a different meaning than in other languages,
      CoffeeScript compiles <tt>==</tt> into <tt>===</tt>, and <tt>!=</tt> into
      <tt>!==</tt>.
      In addition, <tt>is</tt> compiles into <tt>===</tt>,
      and <tt>isnt</tt> into <tt>!==</tt>.
    </p>
    <p>
      You can use <tt>not</tt> as an alias for <tt>!</tt>.
    </p>
    <p>
      For logic, <tt>and</tt> compiles to <tt>&amp;&amp;</tt>, and <tt>or</tt>
      into <tt>||</tt>.
    </p>
    <p>
      Instead of a newline or semicolon, <tt>then</tt> can be used to separate
      conditions from expressions, in <b>while</b>,
      <b>if</b>/<b>else</b>, and <b>switch</b>/<b>when</b> statements.
    </p>
    <p>
      As in <a href="http://yaml.org/">YAML</a>, <tt>on</tt> and <tt>yes</tt>
      are the same as boolean <tt>true</tt>, while <tt>off</tt> and <tt>no</tt> are boolean <tt>false</tt>.
    </p>
    <p>
      For single-line statements, <tt>unless</tt> can be used as the inverse of <tt>if</tt>.
    </p>
    <p>
      As a shortcut for <tt>this.property</tt>, you can use <tt>@property</tt>.
    </p>
    <p>
      You can use <tt>in</tt> to test for array presence, and <tt>of</tt> to
      test for JavaScript object-key presence.
    </p>
    <%= code_for('aliases') %>

    <p>
      <span id="splats" class="bookmark"></span>
      <b class="header">Splats...</b>
      The JavaScript <b>arguments object</b> is a useful way to work with
      functions that accept variable numbers of arguments. CoffeeScript provides
      splats <tt>...</tt>, both for function definition as well as invocation,
      making variable numbers of arguments a little bit more palatable.
    </p>
    <%= code_for('splats', true) %>

    <p>
      <span id="while" class="bookmark"></span>
      <b class="header">While, Until, and Loop</b>
      The only low-level loop that CoffeeScript provides is the <b>while</b> loop. The
      main difference from JavaScript is that the <b>while</b> loop can be used
      as an expression, returning an array containing the result of each iteration
      through the loop.
    </p>
    <%= code_for('while', 'lyrics.join("\n")') %>
    <p>
      For readability, the <b>until</b> keyword is equivalent to <tt>while not</tt>,
      and the <b>loop</b> keyword is equivalent to <tt>while true</tt>.
      Other JavaScript loops, such as <b>for</b> loops and <b>do-while</b> loops
      can be mimicked by variations on <b>loop</b>, but the hope is that you
      won't need to do that with CoffeeScript, either because you're using
      <b>each</b> (<b>forEach</b>) style iterators, or...
    </p>

    <p>
      <span id="comprehensions" class="bookmark"></span>
      <b class="header">Comprehensions (Arrays, Objects, and Ranges)</b>
      For your looping needs, CoffeeScript provides array comprehensions
      similar to Python's. They replace (and compile into) <b>for</b> loops, with
      optional guard clauses and the value of the current array index.
      Unlike for loops, array comprehensions are expressions, and can be returned
      and assigned. They should be able to handle most places where you otherwise
      would use a loop, <b>each</b>/<b>forEach</b>, <b>map</b>, or <b>select</b>/<b>filter</b>.
    </p>
    <%= code_for('array_comprehensions') %>
    <p>
      If you know the start and end of your loop, or would like to step through
      in fixed-size increments, you can use a range to specify the start and
      end of your comprehension.
    </p>
    <%= code_for('range_comprehensions', 'countdown') %>
    <p>
      Comprehensions can also be used to iterate over the keys and values in
      an object. Use <tt>of</tt> to signal comprehension over the properties of
      an object instead of the values in an array.
    </p>
    <%= code_for('object_comprehensions', 'ages.join(", ")') %>
    <p>
      By default, object comprehensions are safe, and use a <tt>hasOwnProperty</tt>
      check to make sure that you're dealing with properties on the current
      object. If you'd like the regular JavaScript <br /><tt>for (key in obj) ...</tt>
      loop, for speed or for another reason, you can use <br />
      <tt>for all key, value of object</tt> in CoffeeScript.
    </p>

    <p>
      <span id="slice_splice" class="bookmark"></span>
      <b class="header">Array Slicing and Splicing with Ranges</b>
      CoffeeScript borrows Ruby's
      <a href="http://ruby-doc.org/core/classes/Range.html">range syntax</a>
      for extracting slices of arrays. With two dots (<tt>3..5</tt>), the range
      is inclusive: the first argument is the index of the first element in
      the slice, and the second is the index of the last one. Three dots signify
      a range that excludes the end.
    </p>
    <%= code_for('slices', 'copy') %>
    <p>
      The same syntax can be used with assignment to replace a segment of an
      array with new values (to splice it).
    </p>
    <%= code_for('splices', 'numbers') %>

    <p>
      <span id="expressions" class="bookmark"></span>
      <b class="header">Everything is an Expression (at least, as much as possible)</b>
      You might have noticed how even though we don't add return statements
      to CoffeeScript functions, they nonetheless return their final value.
      The CoffeeScript compiler tries to make sure that all statements in the
      language can be used as expressions. Watch how the <tt>return</tt> gets
      pushed down into each possible branch of execution, in the function
      below.
    </p>
    <%= code_for('expressions', 'eldest') %>
    <p>
      Even though functions will always return their final value, it's both possible
      and encouraged to return early from a function body writing out the explicit
      return (<tt>return value</tt>), when you know that you're done.
    </p>
    <p>
      Because variable declarations occur at the top of scope, assignment can
      be used within expressions, even for variables that haven't been seen before:
    </p>
    <%= code_for('expressions_assignment', 'six') %>
    <p>
      Things that would otherwise be statements in JavaScript, when used
      as part of an expression in CoffeeScript, are converted into expressions
      by wrapping them in a closure. This lets you do useful things, like assign
      the result of a comprehension to a variable:
    </p>
    <%= code_for('expressions_comprehension', 'globals') %>
    <p>
      As well as silly things, like passing a <b>try/catch</b> statement directly
      into a function call:
    </p>
    <%= code_for('expressions_try', true) %>
    <p>
      There are a handful of statements in JavaScript that can't be meaningfully
      converted into expressions, namely <tt>break</tt>, <tt>continue</tt>,
      and <tt>return</tt>. If you make use of them within a block of code,
      CoffeeScript won't try to perform the conversion.
    </p>

    <p>
      <span id="existence" class="bookmark"></span>
      <b class="header">The Existential Operator</b>
      It's a little difficult to check for the existence of a variable in
      JavaScript. <tt>if (variable) ...</tt> comes close, but fails for zero,
      the empty string, and false. CoffeeScript's existential operator <tt>?</tt> returns true unless
      a variable is <b>null</b> or <b>undefined</b>, which makes it analogous
      to Ruby's <tt>nil?</tt>
    </p>
    <p>
      It can also be used for safer conditional assignment than <tt>||=</tt>
      provides, for cases where you may be handling numbers or strings.
    </p>
    <%= code_for('existence', 'speed') %>
    <p>
      The accessor variant of the existential operator <tt>?.</tt> can be used to soak
      up null references in a chain of properties. Use it instead
      of the dot accessor <tt>.</tt> in cases where the base value may be <b>null</b>
      or <b>undefined</b>. If all of the properties exist then you'll get the expected
      result, if the chain is broken, <b>undefined</b> is returned instead of
      the <b>TypeError</b> that would be raised otherwise.
    </p>
    <%= code_for('soaks') %>
    <p>
      Soaking up nulls is similar to Ruby's
      <a href="http://andand.rubyforge.org/">andand gem</a>, and to the
      <a href="http://groovy.codehaus.org/Operators#Operators-SafeNavigationOperator%28%3F.%29">safe navigation operator</a>
      in Groovy.
    </p>

    <p>
      <span id="classes" class="bookmark"></span>
      <b class="header">Classes, Inheritance, and Super</b>
      JavaScript's prototypal inheritance has always been a bit of a
      brain-bender, with a whole family tree of libraries that provide a cleaner
      syntax for classical inheritance on top of JavaScript's prototypes:
      <a href="http://code.google.com/p/base2/">Base2</a>,
      <a href="http://prototypejs.org/">Prototype.js</a>,
      <a href="http://jsclass.jcoglan.com/">JS.Class</a>, etc.
      The libraries provide syntactic sugar, but the built-in inheritance would
      be completely usable if it weren't for a couple of small exceptions:
      it's awkward to call <b>super</b> (the prototype object's
      implementation of the current function), and it's awkward to correctly
      set the prototype chain.
    </p>
    <p>
      Instead of repetitively attaching functions to a prototype, CoffeeScript
      provides a basic <tt>class</tt> structure that allows you to name your class,
      set the superclass, assign prototypal properties, and define the constructor,
      in a single assignable expression.
    </p>
    <%= code_for('classes', true) %>
    <p>
      If structuring your prototypes classically isn't your cup of tea, CoffeeScript
      provides a couple of lower-level conveniences. The <tt>extends</tt> operator
      helps with proper prototype setup, <tt>::</tt> gives you
      quick access to an object's prototype, and <tt>super()</tt>
      is converted into a call against the immediate ancestor's method of the same name.
    </p>
    <%= code_for('prototypes', '"one_two".dasherize()') %>
    <p>
      Finally, you may assign Class-level (static) properties within a class
      definition by using<br /><tt>@property: value</tt>
    </p>

    <p>
      <span id="pattern_matching" class="bookmark"></span>
      <b class="header">Pattern Matching (Destructuring Assignment)</b>
      To make extracting values from complex arrays and objects more convenient,
      CoffeeScript implements ECMAScript Harmony's proposed
      <a href="http://wiki.ecmascript.org/doku.php?id=harmony:destructuring">destructuring assignment</a>
      syntax. When you assign an array or object literal to a value, CoffeeScript
      breaks up and matches both sides against each other, assigning the values
      on the right to the variables on the left. In the simplest case, it can be
      used for parallel assignment:
    </p>
    <%= code_for('parallel_assignment', 'theBait') %>
    <p>
      But it's also helpful for dealing with functions that return multiple
      values.
    </p>
    <%= code_for('multiple_return_values', 'forecast') %>
    <p>
      Pattern matching can be used with any depth of array and object nesting,
      to help pull out deeply nested properties.
    </p>
    <%= code_for('object_extraction', 'name + " — " + street') %>
    <p>
      Pattern matching can even be combined with splats.
    </p>
    <%= code_for('patterns_and_splats', 'contents.join("")') %>

    <p>
      <span id="fat_arrow" class="bookmark"></span>
      <b class="header">Function binding</b>
      In JavaScript, the <tt>this</tt> keyword is dynamically scoped to mean the
      object that the current function is attached to. If you pass a function as
      as callback, or attach it to a different object, the original value of <tt>this</tt>
      will be lost. If you're not familiar with this behavior,
      <a href="http://www.digital-web.com/articles/scope_in_javascript/">this Digital Web article</a>
      gives a good overview of the quirks.
    </p>
    <p>
      The fat arrow <tt>=&gt;</tt> can be used to both define a function, and to bind
      it to the current value of <tt>this</tt>, right on the spot. This is helpful
      when using callback-based libraries like Prototype or jQuery, for creating
      iterator functions to pass to <tt>each</tt>, or event-handler functions
      to use with <tt>bind</tt>. Functions created with the fat arrow are able to access
      properties of the <tt>this</tt> where they're defined.
    </p>
    <%= code_for('fat_arrow') %>
    <p>
      If we had used <tt>-></tt> in the callback above, <tt>@customer</tt> would
      have referred to the undefined "customer" property of the DOM element,
      and trying to call <tt>purchase()</tt> on it would have raised an exception.
    </p>

    <p>
      <span id="embedded" class="bookmark"></span>
      <b class="header">Embedded JavaScript</b>
      Hopefully, you'll never need to use it, but if you ever need to intersperse
      snippets of JavaScript within your CoffeeScript, you can
      use backticks to pass it straight through.
    </p>
    <%= code_for('embedded', 'hi()') %>

    <p>
      <span id="switch" class="bookmark"></span>
      <b class="header">Switch/When/Else</b>
      <b>Switch</b> statements in JavaScript are a bit awkward. You need to
      remember to <b>break</b> at the end of every <b>case</b> statement to
      avoid accidentally falling through to the default case.
      CoffeeScript prevents accidental fall-through, and can convert the <tt>switch</tt>
      into a returnable, assignable expression. The format is: <tt>switch</tt> condition,
      <tt>when</tt> clauses, <tt>else</tt> the default case.
    </p>
    <p>
      As in Ruby, <b>switch</b> statements in CoffeeScript can take multiple
      values for each <b>when</b> clause. If any of the values match, the clause
      runs.
    </p>
    <%= code_for('switch') %>

    <p>
      <span id="try" class="bookmark"></span>
      <b class="header">Try/Catch/Finally</b>
      Try/catch statements are just about the same as JavaScript (although
      they work as expressions).
    </p>
    <%= code_for('try') %>

    <p>
      <span id="comparisons" class="bookmark"></span>
      <b class="header">Chained Comparisons</b>
      CoffeeScript borrows
      <a href="http://docs.python.org/reference/expressions.html#notin">chained comparisons</a>
      from Python &mdash; making it easy to test if a value falls within a
      certain range.
    </p>
    <%= code_for('comparisons', 'healthy') %>

    <p>
      <span id="interpolation" class="bookmark"></span>
      <b class="header">String and RegExp Interpolation</b>
      Ruby-style string interpolation is included in CoffeeScript. Double-quoted
      strings allow for interpolated values, while single-quoted strings are literal.
    </p>
    <%= code_for('interpolation', 'quote') %>
    <p>
      And arbitrary expressions can be interpolated by using brackets <tt>#{ ... }</tt><br />
      Interpolation works the same way within regular expressions.
    </p>
    <%= code_for('interpolation_expression', 'sentence') %>

    <p>
      <span id="heredocs" class="bookmark"></span>
      <b class="header">Multiline Strings, Heredocs, and Block Comments</b>
      Multiline strings are allowed in CoffeeScript.
    </p>
    <%= code_for('strings', 'mobyDick') %>
    <p>
      Heredocs can be used to hold formatted or indentation-sensitive text
      (or, if you just don't feel like escaping quotes and apostrophes). The
      indentation level that begins the heredoc is maintained throughout, so
      you can keep it all aligned with the body of your code.
    </p>
    <%= code_for('heredocs') %>
    <p>
      Double-quoted heredocs, like double-quoted strings, allow interpolation.
    </p>
    <p>
      Sometimes you'd like to pass a block comment through to the generated
      JavaScript. For example, when you need to embed a licensing header at
      the top of a file. Block comments, which mirror the synax for heredocs,
      are preserved in the generated code.
    </p>
    <%= code_for('block_comment') %>

    <h2>
      <span id="cake" class="bookmark"></span>
      Cake, and Cakefiles
    </h2>

    <p>
      CoffeeScript includes a simple build system similar to
      <a href="http://www.gnu.org/software/make/">Make</a> and
      <a href="http://rake.rubyforge.org/">Rake</a>. Naturally,
      it's called Cake, and is used for the build and test tasks for the CoffeeScript
      language itself. Tasks are defined in a file named <tt>Cakefile</tt>, and
      can be invoked by running <tt>cake taskname</tt> from within the directory.
      To print a list of all the tasks and options, just run <tt>cake</tt>.
    </p>

    <p>
      Task definitions are written in CoffeeScript, so you can put arbitrary code
      in your Cakefile. Define a task with a name, a long description, and the
      function to invoke when the task is run. If your task takes a command-line
      option, you can define the option with short and long flags, and it will
      be made available in the <tt>options</tt> object. Here's a task that uses
      the Node.js API to rebuild CoffeeScript's parser:
    </p>
    <%= code_for('cake_tasks') %>
    <p>
      If you need to invoke one task before another &mdash; for example, running
      <tt>build</tt> before <tt>test</tt>, you can use the <tt>invoke</tt> function:
      <tt>invoke 'build'</tt>
    </p>

    <h2>
      <span id="scripts" class="bookmark"></span>
      "text/coffeescript" Script Tags
    </h2>

    <p>
      While it's not recommended for serious use, CoffeeScripts may be included
      directly within the browser using <tt>&lt;script type="text/coffeescript"&gt;</tt>
      tags. The source includes a compressed and minified version of the compiler
      (<a href="extras/coffee-script.js">Download current version here, 43k when gzipped</a>)
      as <tt>extras/coffee-script.js</tt>. Include this file on a page with
      inline CoffeeScript tags, and it will compile and evaluate them in order.
    </p>

    <p>
      In fact, the little bit of glue script that runs "Try CoffeeScript" above,
      as well as jQuery for the menu, is implemented in just this way.
      View source and look at the bottom of the page to see the example.
      Including the script also gives you access to <tt>CoffeeScript.compile()</tt>
      so you can pop open Firebug and try compiling some strings.
    </p>

    <p>
      The usual caveats about CoffeeScript apply &mdash; your inline scripts will
      run within a closure wrapper, so if you want to expose global variables or
      functions, attach them to the <tt>window</tt> object.
    </p>

    <h2>
      <span id="resources" class="bookmark"></span>
      Resources
    </h2>

    <ul>
      <li>
        <a href="http://github.com/jashkenas/coffee-script/">Source Code</a><br />
        Use <tt>bin/coffee</tt> to test your changes,<br />
        <tt>bin/cake test</tt> to run the test suite,<br />
        <tt>bin/cake build</tt> to rebuild the CoffeeScript compiler, and <br />
        <tt>bin/cake build:parser</tt> to regenerate the Jison parser if you're
        working on the grammar. <br /><br />
        <tt>git checkout lib &amp;&amp; bin/cake build:full</tt> is a good command to run when you're working
        on the core language. It'll refresh the lib directory
        (in case you broke something), build your altered compiler, use that to
        rebuild itself (a good sanity test) and then run all of the tests. If
        they pass, there's a good chance you've made a successful change.
      </li>
      <li>
        <a href="http://github.com/jashkenas/coffee-script/issues">CoffeeScript Issues</a><br />
        Bugs reports, feature requests, and general discussion all belong here.
      </li>
      <li>
        If you'd like to chat, stop by <tt>#coffeescript</tt> on Freenode in the
        IRC client of your choice, or on
        <a href="http://webchat.freenode.net/">webchat.freenode.net</a>.
      </li>
      <li>
        <b>yeungda</b>'s <a href="http://github.com/yeungda/jcoffeescript">JCoffeeScript</a>
        &mdash; A Java Library that uses Rhino to compile CoffeeScript, allowing
        compilation within Java projects or on systems that Node.js doesn't support.
      </li>
      <li>
        <b>defunkt</b>'s <a href="http://github.com/defunkt/coffee-mode">CoffeeScript Major Mode</a>
        &mdash; a Emacs major mode that provides syntax highlighting, indentation
        support, and some bonus commands.
      </li>
      <li>
        <b>jashkenas</b>'s <a href="http://github.com/jashkenas/coffee-script-tmbundle">CoffeeScript TextMate Bundle</a>
        &mdash; which provides syntax highlighting, snippet expansion, and the
        ability to run bits of CoffeeScript from within TextMate itself.
      </li>
      <li>
        <b>kchmck</b>'s <a href="http://github.com/kchmck/vim-coffee-script">Vim CoffeeScript</a>
        &mdash; which adds Vim syntax highlighting and indentation support.
      </li>
      <li>
        <b>wavded</b>'s <a href="http://github.com/wavded/gedit-coffeescript">gedit-coffeescript</a>
        &mdash; a CoffeeScript syntax highlighter for the gedit text editor.
      </li>
      <li>
        <b>yeungda</b>'s <a href="http://yeungda.github.com/coffeescript-idea/">coffeescript-idea</a>
        &mdash; a plugin for IntelliJ IDEA and RubyMine providing syntax highlighting.
      </li>
      <li>
        <b>mattly</b>'s <a href="http://github.com/mattly/rack-coffee">rack-coffee</a>
        &mdash; a small Rack middleware for serving CoffeeScript files as
        compiled JavaScript on the fly.
      </li>
      <li>
        <b>jnicklas</b>'s <a href="http://github.com/jnicklas/bistro_car">BistroCar</a>
        &mdash; a plugin that serves and bundles CoffeeScript from within your
        Rails application.
      </li>
      <li>
        <b>dsc</b>'s <a href="http://github.com/dsc/coffeecup">CoffeeCup</a>
        &mdash; a Python WSGI middleware that compiles CoffeeScript to JavaScript
        on-demand during development.
      </li>
      <li>
        <b>sutto</b>'s <a href="http://github.com/Sutto/barista">Barista</a>
        &mdash; a BistroCar alternative that integrates well with
        <a href="http://documentcloud.github.com/jammit">Jammit</a> and Rails 3.
      </li>
      <li>
        <b>inem</b> and <b>gerad</b>'s <a href="http://github.com/gerad/coffee-haml-filter">coffee-haml-filter</a>
        &mdash; a custom filter for rendering CoffeeScript inline within
        <a href="http://haml-lang.com/">HAML</a> templates.
      </li>
      <li>
        <b>chrislloyd</b>'s <a href="http://github.com/chrislloyd/roast">Roast</a>
        &mdash; a CoffeeScript compiler plug-in that allows you to include external
        source files.
      </li>
      <li>
        <b>andrzejsliwa</b>'s <a href="http://github.com/andrzejsliwa/coffeeapp">CoffeeApp</a>
        &mdash; a CoffeeScript wrapper for CouchApps, web applications served
        directly from CouchDB.
      </li>
      <li>
        <b>mauricemach</b>'s <a href="http://github.com/mauricemach/coffeekup">CoffeeKup</a>
        &mdash; Markup as CoffeeScript. After _why's
        <a href="http://markaby.github.com/">Markaby</a>.
      </li>
      <li>
        <b>jashkenas</b>'s <a href="http://jashkenas.github.com/docco/">Docco</a>
        &mdash; a quick-and-dirty literate-programming-style documentation generator
        for CoffeeScript. Used to produce the annotated source.
      </li>
    </ul>

    <h2>
      <span id="webchat" class="bookmark"></span>
      Web Chat (IRC)
    </h2>

    <p>
      Quick help and advice can usually be found in the CoffeeScript IRC room.
      Join <tt>#coffeescript</tt> on <tt>irc.freenode.net</tt>, or click the
      button below to open a webchat session on this page.
    </p>

    <p>
      <button id="open_webchat">click to open #coffeescript</button>
    </p>

    <h2>
      <span id="change_log" class="bookmark"></span>
      Change Log
    </h2>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.4</b>
      CoffeeScript now uses appropriately-named temporary variables, and recycles
      their references after use. Added <tt>require.extensions</tt> support for
      <b>Node.js 0.3</b>. Loading CoffeeScript in the browser now adds just a
      single <tt>CoffeeScript</tt> object to global scope.
      Fixes for implicit object and block comment edge cases.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.3</b>
      CoffeeScript <tt>switch</tt> statements now compile into JS <tt>switch</tt>
      statements &mdash; they previously compiled into <tt>if/else</tt> chains
      for JavaScript 1.3 compatibility.
      Soaking a function invocation is now supported. Users of the RubyMine
      editor should now be able to use <tt>--watch</tt> mode.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.2</b>
      Specifying the start and end of a range literal is now optional, eg. <tt>array[3..]</tt>.
      You can now say <tt>a not instanceof b</tt>.
      Fixed important bugs with nested significant and non-significant indentation (Issue #637).
      Added a <tt>--require</tt> flag that allows you to hook into the <tt>coffee</tt> command.
      Added a custom <tt>jsl.conf</tt> file for our preferred JavaScriptLint setup.
      Sped up Jison grammar compilation time by flattening rules for operations.
      Block comments can now be used with JavaScript-minifier-friendly syntax.
      Added JavaScript's compound assignment bitwise operators. Bugfixes to
      implicit object literals with leading number and string keys, as the subject
      of implicit calls, and as part of compound assignment.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.1</b>
      Bugfix release for <b>0.9.1</b>. Greatly improves the handling of mixed
      implicit objects, implicit function calls, and implicit indentation.
      String and regex interpolation is now strictly <tt>#{ ... }</tt> (Ruby style).
      The compiler now takes a <tt>--require</tt> flag, which specifies scripts
      to run before compilation.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.0</b>
      The CoffeeScript <b>0.9</b> series is considered to be a release candidate
      for <b>1.0</b>; let's give her a shakedown cruise. <b>0.9.0</b> introduces a massive
      backwards-incompatible change: Assignment now uses <tt>=</tt>, and object
      literals use <tt>:</tt>, as in JavaScript. This allows us to have implicit
      object literals, and YAML-style object definitions. Half assignments are
      removed, in favor of <tt>+=</tt>, <tt>or=</tt>, and friends.
      Interpolation now uses a hash mark <tt>#</tt> instead of the dollar sign
      <tt>$</tt> &mdash; because dollar signs may be part of a valid JS identifier.
      Downwards range comprehensions are now safe again, and are optimized to
      straight for loops when created with integer endpoints.
      A fast, unguarded form of object comprehension was added:
      <tt>for all key, value of object</tt>. Mentioning the <tt>super</tt> keyword
      with no arguments now forwards all arguments passed to the function,
      as in Ruby. If you extend class <tt>B</tt> from parent class <tt>A</tt>, if
      <tt>A</tt> has an <tt>extended</tt> method defined, it will be called, passing in <tt>B</tt> &mdash;
      this enables static inheritance, among other things. Cleaner output for
      functions bound with the fat arrow. <tt>@variables</tt> can now be used
      in parameter lists, with the parameter being automatically set as a property
      on the object &mdash; useful in constructors and setter functions.
      Constructor functions can now take splats.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.7.2</b>
      Quick bugfix (right after 0.7.1) for a problem that prevented <tt>coffee</tt>
      command-line options from being parsed in some circumstances.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.7.1</b>
      Block-style comments are now passed through and printed as JavaScript block
      comments -- making them useful for licenses and copyright headers. Better
      support for running coffee scripts standalone via hashbangs.
      Improved syntax errors for tokens that are not in the grammar.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.7.0</b>
      Official CoffeeScript variable style is now camelCase, as in JavaScript.
      Reserved words are now allowed as object keys, and will be quoted for you.
      Range comprehensions now generate cleaner code, but you have to specify <tt>by -1</tt>
      if you'd like to iterate downward. Reporting of syntax errors is greatly
      improved from the previous release. Running <tt>coffee</tt> with no arguments
      now launches the REPL, with Readline support. The <tt>&lt;-</tt> bind operator
      has been removed from CoffeeScript. The <tt>loop</tt> keyword was added,
      which is equivalent to a <tt>while true</tt> loop. Comprehensions that contain
      closures will now close over their variables, like the semantics of a <tt>forEach</tt>.
      You can now use bound function in class definitions (bound to the instance).
      For consistency, <tt>a in b</tt> is now an array presence check, and <tt>a of b</tt>
      is an object-key check. Comments are no longer passed through to the generated
      JavaScript.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.6.2</b>
      The <tt>coffee</tt> command will now preserve directory structure when
      compiling a directory full of scripts. Fixed two omissions that were preventing
      the CoffeeScript compiler from running live within Internet Explorer.
      There's now a syntax for block comments, similar in spirit to CoffeeScript's heredocs.
      ECMA Harmony DRY-style pattern matching is now supported, where the name
      of the property is the same as the name of the value: <tt>{name, length}: func</tt>.
      Pattern matching is now allowed within comprehension variables. <tt>unless</tt>
      is now allowed in block form. <tt>until</tt> loops were added, as the inverse
      of <tt>while</tt> loops. <tt>switch</tt> statements are now allowed without
      switch object clauses. Compatible
      with Node.js <b>v0.1.95</b>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.6.1</b>
      Upgraded CoffeeScript for compatibility with the new Node.js <b>v0.1.90</b>
      series.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.6.0</b>
      Trailing commas are now allowed, a-la Python. Static
      properties may be assigned directly within class definitions,
      using <tt>@property</tt> notation.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.6</b>
      Interpolation can now be used within regular expressions and heredocs, as well as
      strings. Added the <tt>&lt;-</tt> bind operator.
      Allowing assignment to half-expressions instead of special <tt>||=</tt>-style
      operators. The arguments object is no longer automatically converted into
      an array. After requiring <tt>coffee-script</tt>, Node.js can now directly
      load <tt>.coffee</tt> files, thanks to <b>registerExtension</b>. Multiple
      splats can now be used in function calls, arrays, and pattern matching.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.5</b>
      String interpolation, contributed by
      <a href="http://github.com/StanAngeloff">Stan Angeloff</a>.
      Since <tt>--run</tt> has been the default since <b>0.5.3</b>, updating
      <tt>--stdio</tt> and <tt>--eval</tt> to run by default, pass <tt>--compile</tt>
      as well if you'd like to print the result.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.4</b>
      Bugfix that corrects the Node.js global constants <tt>__filename</tt> and
      <tt>__dirname</tt>. Tweaks for more flexible parsing of nested function
      literals and improperly-indented comments. Updates for the latest Node.js API.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.3</b>
      CoffeeScript now has a syntax for defining classes. Many of the core
      components (Nodes, Lexer, Rewriter, Scope, Optparse) are using them.
      Cakefiles can use <tt>optparse.coffee</tt> to define options for tasks.
      <tt>--run</tt> is now the default flag for the <tt>coffee</tt> command,
      use <tt>--compile</tt> to save JavaScripts. Bugfix for an ambiguity between
      RegExp literals and chained divisions.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.2</b>
      Added a compressed version of the compiler for inclusion in web pages as
      <br  /><tt>extras/coffee-script.js</tt>. It'll automatically run any script tags
      with type <tt>text/coffeescript</tt> for you. Added a <tt>--stdio</tt> option
      to the <tt>coffee</tt> command, for piped-in compiles.
    </p>


    <p>
      <b class="header" style="margin-top: 20px;">0.5.1</b>
      Improvements to null soaking with the existential operator, including
      soaks on indexed properties. Added conditions to <tt>while</tt> loops,
      so you can use them as filters with <tt>when</tt>, in the same manner as
      comprehensions.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.0</b>
      CoffeeScript 0.5.0 is a major release, While there are no language changes,
      the Ruby compiler has been removed in favor of a self-hosting
      compiler written in pure CoffeeScript.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.3.2</b>
      <tt>@property</tt> is now a shorthand for <tt>this.property</tt>.<br />
      Switched the default JavaScript engine from Narwhal to Node.js. Pass
      the <tt>--narwhal</tt> flag if you'd like to continue using it.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.3.0</b>
      CoffeeScript 0.3 includes major syntax changes:
      <br />
      The function symbol was changed to
      <tt>-></tt>, and the bound function symbol is now <tt>=></tt>.
      <br />
      Parameter lists in function definitions must now be wrapped in parentheses.
      <br />
      Added property soaking, with the <tt>?.</tt> operator.
      <br />
      Made parentheses optional, when invoking functions with arguments.
      <br />
      Removed the obsolete block literal syntax.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.6</b>
      Added Python-style chained comparisons, the conditional existence
      operator <tt>?=</tt>, and some examples from <i>Beautiful Code</i>.
      Bugfixes relating to statement-to-expression conversion, arguments-to-array
      conversion, and the TextMate syntax highlighter.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.5</b>
      The conditions in switch statements can now take multiple values at once &mdash;
      If any of them are true, the case will run. Added the long arrow <tt>==></tt>,
      which defines and immediately binds a function to <tt>this</tt>. While loops can
      now be used as expressions, in the same way that comprehensions can. Splats
      can be used within pattern matches to soak up the rest of an array.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.4</b>
      Added ECMAScript Harmony style destructuring assignment, for dealing with
      extracting values from nested arrays and objects. Added indentation-sensitive
      heredocs for nicely formatted strings or chunks of code.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.3</b>
      Axed the unsatisfactory <tt>ino</tt> keyword, replacing it with <tt>of</tt> for
      object comprehensions. They now look like: <tt>for prop, value of object</tt>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.2</b>
      When performing a comprehension over an object, use <tt>ino</tt>, instead
      of <tt>in</tt>, which helps us generate smaller, more efficient code at
      compile time.
      <br />
      Added <tt>::</tt> as a shorthand for saying <tt>.prototype.</tt>
      <br />
      The "splat" symbol has been changed from a prefix asterisk <tt>*</tt>, to
      a postfix ellipsis <tt>...</tt>
      <br />
      Added JavaScript's <tt>in</tt> operator,
      empty <tt>return</tt> statements, and empty <tt>while</tt> loops.
      <br />
      Constructor functions that start with capital letters now include a
      safety check to make sure that the new instance of the object is returned.
      <br />
      The <tt>extends</tt> keyword now functions identically to <tt>goog.inherits</tt>
      in Google's Closure Library.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.1</b>
      Arguments objects are now converted into real arrays when referenced.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.0</b>
      Major release. Significant whitespace. Better statement-to-expression
      conversion. Splats. Splice literals. Object comprehensions. Blocks.
      The existential operator. Many thanks to all the folks who posted issues,
      with special thanks to
      <a href="http://github.com/liamoc">Liam O'Connor-Davis</a> for whitespace
      and expression help.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.6</b>
      Bugfix for running <tt>coffee --interactive</tt> and <tt>--run</tt>
      from outside of the CoffeeScript directory. Bugfix for nested
      function/if-statements.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.5</b>
      Array slice literals and array comprehensions can now both take Ruby-style
      ranges to specify the start and end. JavaScript variable declaration is
      now pushed up to the top of the scope, making all assignment statements into
      expressions. You can use <tt>\</tt> to escape newlines.
      The <tt>coffee-script</tt> command is now called <tt>coffee</tt>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.4</b>
      The official CoffeeScript extension is now <tt>.coffee</tt> instead of
      <tt>.cs</tt>, which properly belongs to
      <a href="http://en.wikipedia.org/wiki/C_Sharp_(programming_language)">C#</a>.
      Due to popular demand, you can now also use <tt>=</tt> to assign. Unlike
      JavaScript, <tt>=</tt> can also be used within object literals, interchangeably
      with <tt>:</tt>. Made a grammatical fix for chained function calls
      like <tt>func(1)(2)(3)(4)</tt>. Inheritance and super no longer use
      <tt>__proto__</tt>, so they should be IE-compatible now.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.3</b>
      The <tt>coffee</tt> command now includes <tt>--interactive</tt>,
      which launches an interactive CoffeeScript session, and <tt>--run</tt>,
      which directly compiles and executes a script. Both options depend on a
      working installation of Narwhal.
      The <tt>aint</tt> keyword has been replaced by <tt>isnt</tt>, which goes
      together a little smoother with <tt>is</tt>.
      Quoted strings are now allowed as identifiers within object literals: eg.
      <tt>{"5+5": 10}</tt>.
      All assignment operators now use a colon: <tt>+:</tt>, <tt>-:</tt>,
      <tt>*:</tt>, etc.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.2</b>
      Fixed a bug with calling <tt>super()</tt> through more than one level of
      inheritance, with the re-addition of the <tt>extends</tt> keyword.
      Added experimental <a href="http://narwhaljs.org/">Narwhal</a>
      support (as a Tusk package), contributed by
      <a href="http://tlrobinson.net/">Tom Robinson</a>, including
      <b>bin/cs</b> as a CoffeeScript REPL and interpreter.
      New <tt>--no-wrap</tt> option to suppress the safety function
      wrapper.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.1</b>
      Added <tt>instanceof</tt> and <tt>typeof</tt> as operators.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.0</b>
      Initial CoffeeScript release.
    </p>

  </div>

  <script type="text/coffeescript">

    # Set up the compilation function, to run when you stop typing.
    compile_source = ->
      source = $('#repl_source').val()
      window.compiled_js = ''
      try
        window.compiled_js = CoffeeScript.compile source, bare: on
        $('#repl_results').text window.compiled_js
        $('#error').hide()
      catch error
        $('#error').text(error.message).show()

    # Listen for keypresses and recompile.
    $('#repl_source').keyup -> compile_source()

    # Eval the compiled js.
    $('button.run').click ->
      try
        eval window.compiled_js
      catch error then alert error

    current_nav = null

    # Helper to hide the menus.
    close_menus = ->
      if current_nav
        current_nav.removeClass 'active'
        document.body.className = 'minimized'
      current_nav = null

    # Bind navigation buttons to open the menus.
    $('.navigation').click (e) ->
      return if e.target.tagName.toLowerCase() is 'a'
      if this isnt (current_nav and current_nav[0])
        close_menus()
        current_nav = $(this)
        current_nav.addClass 'active'
      false

    $(document.body).click -> close_menus()

    $('.navigation .full_screen').click ->
      document.body.className = 'full_screen'

    $('.navigation .minimize').click ->
      document.body.className = 'minimized'

    $('#open_webchat').click ->
      $(this).replaceWith $('<iframe src="http://webchat.freenode.net/?channels=coffeescript" width="625" height="400"></iframe>')

    compile_source()

  </script>

  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script>
  <script src="extras/coffee-script.js"></script>

</body>
</html>
